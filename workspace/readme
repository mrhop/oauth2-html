https://github.com/akveo/blur-admin

//next do multi-module
//multi module,包含 include 重用的部分 header，left
//content 部分作为
//css scss的js module整合
//vendor and app and webpack
//also
//keep on doing another html.finally state data

//各种插件尽可能的使用react的

//开始到了content部分，参照dashboard部分

//special layout/panel/modal can shall be added when needed
//now panel task
then
modal/tab/table
//panel modal toast finished
!tab + table need to do now

tab finished
now tables
//考虑modal的创建以及生命周期介绍--done key的关键使用

tables 的各种样式以及td的左右以及链接，比如email,and also smart tables
//继续table的数据融入,数据ok，继续其他样式的table
//table 的列过滤设置[DONE]
[样例数据在webpack中的放置,CopyWebpackPlugin[done]]
//table 的自动同步数据设置[now 就是前后台的数据处理的同步性，使用样例数据作为数据标本],------>
//以及条件的触发,save cancel delete edit按钮的触发
//过滤+分页 shall be here
server 排序，but each time get first 5 page records and save at client but give the total records number，（the biggest pagers）
then when sort and filter update the data, delete ,when  the last page is 饱满的，do nothing, refresh base on the first total records number,and the total records number can be changed each refresh
use this concept，server 排序
return currentTbody and first 5 page data,when go to the 3 pages ,asychronized the next 6 7 page data, if exists, which shall be good to see and feel
1,2,3,4,5......
...2,3,4,5,6
...3,4,5,6,7...

分页样式问题,分页过多时的持续增加，自适应页面时的处理
filter部分和add部分共用一套代码，根据thead的type进行type的处理，最好可以和tbody edit部分的一起实现,utilFun 实现form元素的统一实现
now add item,to the top line, then save, cancel button --->add finished
save finished



//然后是table tableValues的data 后端获取，以及关联触发处理
//然后是reactjs的mvvm的处理模型
//then forms 以及图表的处理



//THEN forms and basic functions like mail,online talking and others,then cms/crm basic creation
//add a click event when the screen is small and the left banner is show,then hide the left banner,需要消息推送机制（message），notification采用流程触发机制，在线交流im的话考虑云信
mail另行考虑，mail涉及的操作太多

学习一下java的流程化规范，任务链以及机制，如果要规范，就要从开始定义完备



rowSize 不可以为未设




遗留问题---》
form表单元素的格式错误验证功能遗留
